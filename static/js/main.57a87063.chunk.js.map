{"version":3,"sources":["components/IconContainer/index.js","components/IconCard/index.js","components/Jumbotron/index.js","components/Wrapper/index.js","components/IconButton/index.js","App.js","serviceWorker.js","index.js"],"names":["IconContainer","props","react_default","a","createElement","className","children","IconCard","myChildren","React","Children","map","child","cloneElement","id","skill","alt","src","icon","Jumbotron","score","Wrapper","IconButton","state","_this","increaseScore","_","console","log","scoreManipulator","setLastClicked","this","type","onClick","Component","App","icons","lastClicked","Object","assertThisInitialized","setState","current","_this2","components_Wrapper","components_Jumbotron","components_IconContainer","components_IconCard","key","components_IconButton","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.57a87063.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction IconContainer(props) {\n    return <div className=\"iconContainer\">{props.children}</div>;\n}\n\nexport default IconContainer;","import React from \"react\";\n\n\n\nfunction IconCard(props) {\n\n    const myChildren = React.Children.map(props.children , child => {\n        return (\n            React.cloneElement(child, {\n                id: props.id,\n                skill: props.skill\n            })\n        )\n    })\n\n    return(\n    <div className=\"card\">\n      <div className=\"img-container\">\n        <img alt={props.skill} src={props.icon} />\n      </div>\n      <span>\n          {myChildren}\n      </span>\n    </div>\n    )\n};\n\nexport default IconCard;","import React from \"react\";\n\nfunction Jumbotron(props) {\n    return (\n        <div className=\"jumbotron\">\n            <h1 className=\"display-4\">Runescape Skill Click</h1>\n            <p className=\"lead\">Click the skill icons! It's React!</p>\n            <p>Score {props.score}</p>\n        </div>\n    )\n}\n\nexport default Jumbotron;","import React from \"react\";\n\nfunction Wrapper(props) {\n    return <div className=\"container\">{props.children}</div>\n};\n\nexport default Wrapper;","import React from \"react\";\n\nclass IconButton extends React.Component {\n    // constructor(props) {\n    //     super(props)\n    // }\n\n    state = {\n        id: this.props.id\n    }\n\n    increaseScore = _=> {\n        console.log(this.state.id, \"increaseScore run\")\n        this.props.scoreManipulator(this.state.id)\n        this.props.setLastClicked(this.state.id)\n      }\n\n    componentDidMount() {\n        console.log(this.state.id , \"TSI\")\n    }\n    \n\n    render() {\n        return(\n        <button type=\"button\" className=\"btn btn-primary\" id={this.props.id} onClick={this.increaseScore}>Skill</button>\n        )}\n};\n\nexport default IconButton;","import React, { Component } from 'react';\nimport './App.css';\nimport icons from \"./icons.json\"\nimport IconContainer from './components/IconContainer';\nimport IconCard from './components/IconCard';\nimport Jumbotron from \"./components/Jumbotron\";\nimport Wrapper from \"./components/Wrapper\";\nimport IconButton from './components/IconButton';\n\nclass App extends Component {\n\n  state = { \n    icons,\n  lastClicked: 99,\n  score: 0\n }\n\n  componentDidMount() {\n    console.log(\"app mounted\")\n  }\n\n  setLastClicked = id => {\n    console.log(this, \"setLastClick run\")\n    console.log(id , \"sLC ID\")\n    this.setState(state => {\n      console.log (state.lastClicked)\n      return {lastClicked: id}\n    })\n    console.log(this.state.lastClicked , \"tsLC\")\n  }\n\n  scoreManipulator = (current) => {\n    (this.state.lastClicked !== current) \n    ? this.setState(state => {\n      return {score: (state.score + 1)}\n    })\n    : this.setState(state => {\n      return {score: 0}\n    })\n  }\n\n  componentDidUpdate() {\n    console.log(this.state.lastClicked , \"cDU\")\n    console.log(this.state.score , \"cdu score\")\n  }\n\n  render() {\n    return (\n      <Wrapper>\n      <Jumbotron score={this.state.score}/>\n      <IconContainer>\n        {this.state.icons.map(icon => {\n          return (<IconCard \n            icon={icon.icon}\n            key={icon.id}\n            id={icon.id}\n            skill={icon.skill}\n            >\n            <IconButton setLastClicked={this.setLastClicked} scoreManipulator={this.scoreManipulator} />\n            </IconCard>)\n        })}\n      </IconContainer>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
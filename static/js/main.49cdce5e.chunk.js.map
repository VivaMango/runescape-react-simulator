{"version":3,"sources":["components/IconContainer/index.js","components/IconCard/index.js","components/Jumbotron/index.js","components/Wrapper/index.js","components/IconButton/index.js","App.js","serviceWorker.js","index.js"],"names":["IconContainer","props","react_default","a","createElement","className","children","IconCard","myChildren","React","Children","map","child","cloneElement","id","skill","alt","src","icon","Jumbotron","score","Wrapper","IconButton","state","_this","increaseScore","_","console","log","scoreManipulator","setLastClicked","this","type","onClick","Component","App","icons","lastClicked","Object","assertThisInitialized","setState","current","_this2","components_Wrapper","components_Jumbotron","components_IconContainer","components_IconCard","key","components_IconButton","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.49cdce5e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction IconContainer(props) {\r\n    return <div className=\"iconContainer\">{props.children}</div>;\r\n}\r\n\r\nexport default IconContainer;","import React from \"react\";\r\n\r\n\r\n\r\nfunction IconCard(props) {\r\n\r\n    const myChildren = React.Children.map(props.children , child => {\r\n        return (\r\n            React.cloneElement(child, {\r\n                id: props.id,\r\n                skill: props.skill\r\n            })\r\n        )\r\n    })\r\n\r\n    return(\r\n    <div className=\"card\">\r\n      <div className=\"img-container\">\r\n        <img alt={props.skill} src={props.icon} />\r\n      </div>\r\n      <span>\r\n          {myChildren}\r\n      </span>\r\n    </div>\r\n    )\r\n};\r\n\r\nexport default IconCard;","import React from \"react\";\r\n\r\nfunction Jumbotron(props) {\r\n    return (\r\n        <div className=\"jumbotron\">\r\n            <h1 className=\"display-4\">Runescape Skill Click</h1>\r\n            <p className=\"lead\">Click the skill icons! It's React!</p>\r\n            <p>Score {props.score}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Jumbotron;","import React from \"react\";\r\n\r\nfunction Wrapper(props) {\r\n    return <div className=\"container\">{props.children}</div>\r\n};\r\n\r\nexport default Wrapper;","import React from \"react\";\r\n\r\nclass IconButton extends React.Component {\r\n    // constructor(props) {\r\n    //     super(props)\r\n    // }\r\n\r\n    state = {\r\n        id: this.props.id\r\n    }\r\n\r\n    increaseScore = _=> {\r\n        console.log(this.state.id, \"increaseScore run\")\r\n        this.props.scoreManipulator(this.state.id)\r\n        this.props.setLastClicked(this.state.id)\r\n      }\r\n\r\n    componentDidMount() {\r\n        console.log(this.state.id , \"TSI\")\r\n    }\r\n    \r\n\r\n    render() {\r\n        return(\r\n        <button type=\"button\" className=\"btn btn-primary\" id={this.props.id} onClick={this.increaseScore}>Skill</button>\r\n        )}\r\n};\r\n\r\nexport default IconButton;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport icons from \"./icons.json\"\r\nimport IconContainer from './components/IconContainer';\r\nimport IconCard from './components/IconCard';\r\nimport Jumbotron from \"./components/Jumbotron\";\r\nimport Wrapper from \"./components/Wrapper\";\r\nimport IconButton from './components/IconButton';\r\n\r\nclass App extends Component {\r\n\r\n  state = { \r\n    icons,\r\n  lastClicked: 99,\r\n  score: 0\r\n }\r\n\r\n  componentDidMount() {\r\n    console.log(\"app mounted\")\r\n  }\r\n\r\n  setLastClicked = id => {\r\n    console.log(this, \"setLastClick run\")\r\n    console.log(id , \"sLC ID\")\r\n    this.setState(state => {\r\n      console.log (state.lastClicked)\r\n      return {lastClicked: id}\r\n    })\r\n    console.log(this.state.lastClicked , \"tsLC\")\r\n  }\r\n\r\n  scoreManipulator = (current) => {\r\n    (this.state.lastClicked !== current) \r\n    ? this.setState(state => {\r\n      return {score: (state.score + 1)}\r\n    })\r\n    : this.setState(state => {\r\n      return {score: 0}\r\n    })\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    console.log(this.state.lastClicked , \"cDU\")\r\n    console.log(this.state.score , \"cdu score\")\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Wrapper>\r\n      <Jumbotron score={this.state.score}/>\r\n      <IconContainer>\r\n        {this.state.icons.map(icon => {\r\n          return (<IconCard \r\n            icon={icon.icon}\r\n            key={icon.id}\r\n            id={icon.id}\r\n            skill={icon.skill}\r\n            >\r\n            <IconButton setLastClicked={this.setLastClicked} scoreManipulator={this.scoreManipulator} />\r\n            </IconCard>)\r\n        })}\r\n      </IconContainer>\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}